# LSPでの入力補完等
[[plugins]]
repo = 'neoclide/coc.nvim'
merge = 0
rev = 'release'
hook_add = '''
  " インストールするプラグイン
  let g:coc_global_extensions = [
  \ 'coc-solargraph',
  \ 'coc-pyright',
  \ 'coc-tsserver',
  \ 'coc-html',
  \ 'coc-css',
  \ 'coc-json',
  \ 'coc-yaml',
  \ 'coc-docker',
  \ 'coc-sh',
  \ 'coc-go',
  \ 'coc-cfn-lint',
  \ 'coc-lists'
  \ ]

  " シンボルハイライト等の表示更新の遅延
  set updatetime=300

  " 補完のTABキーの動作
  inoremap <silent><expr> <TAB>
  \ coc#pum#visible() ? coc#pum#next(1) :
  \ CheckBackspace() ? "\<Tab>" :
  \ coc#refresh()
  inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

  " 補完候補の確定
  inoremap <expr> <cr> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"

  function! CheckBackspace() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  " <C-space>での補完実行
  if has('nvim')
    inoremap <silent><expr> <c-space> coc#refresh()
  else
    inoremap <silent><expr> <c-@> coc#refresh()
  endif

  " diagnosticsの候補移動
  nmap <silent> [g <Plug>(coc-diagnostic-prev)
  nmap <silent> ]g <Plug>(coc-diagnostic-next)

  " 定義元参照等の移動
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  " ドキュメントの表示
  nnoremap <silent> K :call ShowDocumentation()<CR>
  nnoremap <silent> <leader>h :call ShowDocumentation()<cr>

  function! ShowDocumentation()
    if CocAction('hasProvider', 'hover')
      call CocActionAsync('doHover')
    else
      call feedkeys('K', 'in')
    endif
  endfunction

  " カーソル下シンボルのハイライト
  autocmd CursorHold * silent call CocActionAsync('highlight')

  " シンボルのリネーム
  nmap <leader>rn <Plug>(coc-rename)

  " ドキュメントのpopup内のスクロール
  if has('nvim-0.4.0') || has('patch-8.2.0750')
    nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
    inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
    inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
    vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  endif

  " :Foldでcocによる折りたたみ
  command! -nargs=? Fold :call     CocAction('fold', <f-args>)

  " diagnosticsの一覧表示
  nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>

  " エラーや警告等のハイライト
  autocmd VimEnter,Colorscheme * :hi CocUnderline cterm=underline gui=undercurl
  autocmd VimEnter,Colorscheme * :hi CocErrorHighlight ctermfg=125 cterm=underline guifg=#f7768e gui=undercurl
  autocmd VimEnter,Colorscheme * :hi CocErrorSign ctermfg=125 guifg=#f7768e
  autocmd VimEnter,Colorscheme * :hi CocWarningHighlight ctermfg=130 cterm=underline guifg=#ff9e64 gui=undercurl
  autocmd VimEnter,Colorscheme * :hi CocWarningSign ctermfg=130 guifg=#ff9e64
  autocmd VimEnter,Colorscheme * :hi CocInfoHighlight cterm=underline gui=undercurl
  autocmd VimEnter,Colorscheme * :hi CocHintHighlight cterm=underline gui=undercurl
  autocmd VimEnter,Colorscheme * :hi CocHighlightText ctermbg=238 guibg=#525c88
'''
